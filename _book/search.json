[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "WP4",
    "section": "",
    "text": "1 Openmuse project WP4",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>OpenMuse</span>"
    ]
  },
  {
    "objectID": "Story_1.html",
    "href": "Story_1.html",
    "title": "2  Rebeca: intermediate R/eurostat user",
    "section": "",
    "text": "2.1 Eurostat user\nThis is a usability and requirement scenario for Making Datasets Truly Interoperable in R — source: dataset-working-paper.qmd\nPersona: Rebeca is an intermediate R user who is familiar with the tidyverse and the eurostat package, and the basic concept of tidy data. She works with cultural statistics and wants to make her work FAIR and link to other scientists’ work.\nBefore: Rebeca is able to download the Cultural employment by sex Eurostat statistics with the eurostat R pacakage:\nlibrary(eurostat)\nlibrary(dplyr)\nlibrary(tidyr)\ncult_emp_sex &lt;- get_eurostat(\"cult_emp_sex\")\nstr(cult_emp_sex)\n\ntibble [2,538 × 6] (S3: tbl_df/tbl/data.frame)\n $ freq       : chr [1:2538] \"A\" \"A\" \"A\" \"A\" ...\n $ sex        : chr [1:2538] \"F\" \"F\" \"F\" \"F\" ...\n $ unit       : chr [1:2538] \"PC_EMP\" \"PC_EMP\" \"PC_EMP\" \"PC_EMP\" ...\n $ geo        : chr [1:2538] \"AT\" \"AT\" \"AT\" \"AT\" ...\n $ TIME_PERIOD: Date[1:2538], format: \"2011-01-01\" \"2012-01-01\" ...\n $ values     : num [1:2538] 3.6 4.2 4.1 3.7 3.7 4.1 3.9 3.9 4 3.8 ...\n… and create a derived dataset showing the annualised cultural employment growth rates of European countries from the original cult_emp_sex dataaset with tidyverse functions.\ncult_emp_growth_sex &lt;- cult_emp_sex %&gt;%\n   filter(TIME_PERIOD %in% c(as.Date(\"2022-01-01\"), as.Date(\"2013-01-01\"))) %&gt;%\n   mutate(time_var = paste0(\"Y\", substr(as.character(TIME_PERIOD), 1, 4))) %&gt;%\n   select(-TIME_PERIOD) %&gt;%\n   pivot_wider(names_from = \"time_var\", values_from = \"values\") %&gt;%\n   mutate(annual_growth = (Y2022 / Y2013)^0.1)\n\ncult_emp_growth_sex \n\n# A tibble: 216 × 7\n   freq  sex   unit   geo   Y2013 Y2022 annual_growth\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1 A     F     PC_EMP AT      4.1   4.2         1.00 \n 2 A     F     PC_EMP BE      3.5   4.3         1.02 \n 3 A     F     PC_EMP BG      3.2   3.3         1.00 \n 4 A     F     PC_EMP CH      5.4   5           0.992\n 5 A     F     PC_EMP CY      3.2   5           1.05 \n 6 A     F     PC_EMP CZ      4.3   4.2         0.998\n 7 A     F     PC_EMP DE      4.2   4.2         1    \n 8 A     F     PC_EMP DK      5     4.9         0.998\n 9 A     F     PC_EMP EE      6.5   5.1         0.976\n10 A     F     PC_EMP EL      3.7   4.5         1.02 \n# ℹ 206 more rows\nUntil now, she would save these results into a .csv file and upload it to her research website and Zenodo manually. The proaboutblem with this approach that users who download the csv file from her website do not have a clear idea what these variables stand for, or what is the provenance of the work. Such information is available on Zenodo repository, but users who download the .csv file may forget about it.\nAfter: Rebeca can save the cult_emp_growth_sex dataset in R into an .rds file that contains all the DataCite or Dublin Core metadata that is required on Zenodo for publication. She can export this cult_emp_growth_sex.rds file into a CSV format that meets the W3C consortium’s standard on publishing CSV with machine-readable JSON metadata. She can also serialize for long-term usability the cult_emp_growth_sex it into an RDF schema that contains all the semantic information to connect this dataset to other data that use the SDMX semantic standards, such as other datasets of Eurostat, the World Bank or OECD.\n#  DataCite Metadata\nmetadata &lt;- list(\n  identifier = list(\n    identifierType = \"DOI\",\n    identifier = \"YourDOIHere\"\n  ),\n  creators = list(\n    list(\n      creatorName = \"Rebeca\",\n      creatorAffiliation = \"Rebeca_organization\"\n    )\n  ),\n  titles = list(\n    title = \"Cultural employment by sex\"\n  ),\n  publisher = \"Zenodo\",\n  publicationYear = \"2024\",\n  resourceType = list(\n    resourceTypeGeneral = \"Dataset\"\n  ),\n  descriptions = list(\n    list(\n      descriptionType = \"Abstract\",\n      description = \"A brief description of your dataset.\"\n    )\n  )\n)\n\n# Save metadata as a separate .rds file\nmetadata_file &lt;- \"metadata.rds\"\nsaveRDS(metadata, file = metadata_file)\n\n\nmetadata\n\n$identifier\n$identifier$identifierType\n[1] \"DOI\"\n\n$identifier$identifier\n[1] \"YourDOIHere\"\n\n\n$creators\n$creators[[1]]\n$creators[[1]]$creatorName\n[1] \"Rebeca\"\n\n$creators[[1]]$creatorAffiliation\n[1] \"Rebeca_organization\"\n\n\n\n$titles\n$titles$title\n[1] \"Cultural employment by sex\"\n\n\n$publisher\n[1] \"Zenodo\"\n\n$publicationYear\n[1] \"2024\"\n\n$resourceType\n$resourceType$resourceTypeGeneral\n[1] \"Dataset\"\n\n\n$descriptions\n$descriptions[[1]]\n$descriptions[[1]]$descriptionType\n[1] \"Abstract\"\n\n$descriptions[[1]]$description\n[1] \"A brief description of your dataset.\"\n# Save the dataset and metadata together in one .rds file\ncombined_data &lt;- list(\n  metadata = readRDS(metadata_file),\n  dataset = cult_emp_growth_sex\n)\n\n# Specify the filename for the combined .rds file\ncombined_file &lt;- \"cult_emp_growth_sex_with_metadata.rds\"\n\n# Save the combined data\nsaveRDS(combined_data, file = combined_file)\ncult_emp_growth_sex_data &lt;- readRDS(\"cult_emp_growth_sex_with_metadata.rds\")$dataset\ncsv_filename &lt;- \"cult_emp_growth_sex.csv\"\n\nwrite.csv(cult_emp_growth_sex_data, file = csv_filename, row.names = FALSE)\nlibrary(jsonlite)\n\nmetadata &lt;- list(\n  \"@context\" = \"http://www.w3.org/ns/csvw\",\n  \"@type\" = \"Dataset\",\n  \"name\" = \"Cultural Employment Growth Data\",\n  \"description\" = \"A dataset containing cultural employment growth data.\",\n  \"identifier\" = \"https://example.com/datasets/cult_emp_growth_sex.csv\",\n  \"url\" = \"https://example.com/datasets/cult_emp_growth_sex.csv\",\n  \"datePublished\" = \"2024-01-23\",\n  \"creator\" = list(\n    \"@type\" = \"Person\",\n    \"name\" = \"Your Name\",\n    \"email\" = \"your@email.com\"\n  ),\n  \"license\" = \"https://creativecommons.org/licenses/by/4.0/\",\n  \"encodingFormat\" = \"text/csv\"\n)\n\njson_metadata_filename &lt;- \"metadata.json\"\n\nwriteLines(toJSON(metadata, pretty = TRUE), json_metadata_filename)\n\n\njson_metadata_filename\n\n[1] \"metadata.json\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Rebeca: intermediate R/eurostat user</span>"
    ]
  },
  {
    "objectID": "Story_1.html#eurostat-user",
    "href": "Story_1.html#eurostat-user",
    "title": "2  Rebeca: intermediate R/eurostat user",
    "section": "",
    "text": "Rebeca can export the cult_emp_growth_sex dataset into a standard CSV file with standard JSON metadata which contains the data, its semantic description, its data structure, the provenance and related items data, and her desciptive metadata as required by FAIR",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Rebeca: intermediate R/eurostat user</span>"
    ]
  },
  {
    "objectID": "Story_1.html#functional-requirements",
    "href": "Story_1.html#functional-requirements",
    "title": "2  Rebeca: intermediate R/eurostat user",
    "section": "2.2 Functional requirements",
    "text": "2.2 Functional requirements\n\nThe eurostat package retains the provenance metadata, i.e., the descriptive metadata and the semantics of the Eurostat original cult_emp_sex. The dataset package is used by eurostat to record the metadata from the source\nThe eurostat package retains the valid range and the codelist of each variable, in this case, sex, unit, geo, time, and the measured values. The dataset package is used by eurostat to record the codelists from the source\nRebeca can add her own descriptive metadata, i.e., as the creator of the derived cult_emp_growth_sex dataset in a way that cult_emp_growth becomes a related item with the derivative work; Rebeca is recorded as the creator.\nThe eurostat package is added to the related items metadata as a software agent that was used in the creation of the cult_emp_growth_sex derived dataset. The dataset package has a function that adds related items metadata.\nRebeca can export the cult_emp_growth_sex dataset into an RDF resource which contains the data, its semantic description, its data structure, the provenance and related items data, and her desciptive metadata as required by FAIR. The dataset package has a release function that can be used.\nRebeca can export the cult_emp_growth_sex dataset into a standard CSV file with standard JSON metadata which contains the data, its semantic description, its data structure, the provenance and related items data, and her desciptive metadata as required by FAIR. The dataset package has a release function that can be used.\nRebeca can release the package via the connector zen4r to the Zenodo repository. This is explained in a vignette article.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Rebeca: intermediate R/eurostat user</span>"
    ]
  },
  {
    "objectID": "Story_2.html",
    "href": "Story_2.html",
    "title": "3  Ahmed: advanced R/eurostat user",
    "section": "",
    "text": "3.1 Eurostat user\nThis is a usability and requirement scenario for Making Datasets Truly Interoperable in R — source: dataset-working-paper.qmd\nPersona: Ahmed is a research data engineer. His task is to publish his research projects dataset into a five-star FAIR repository that uses a data catalogue. The data catalogue conforms with the DCAT W3C standard and the European Open Data Portal’s DCAT-AP specification.\nBefore: Ahmed has been using the eurostat package for retrieving information from the Eurostat data warehouse, which conforms the SDMX data model, and comes from well-documented data cubes. It still takes him considerable effort to semantically enrich his datasets to put them into the repository, because the eurostat package does not retrieve most of the metadata that comes with the dataset.\nlibrary(eurostat)\nlibrary(dplyr)\nlibrary(tidyr)\ncult_emp_sex &lt;- get_eurostat(\"cult_emp_sex\")\nstr(cult_emp_sex)\n\ntibble [2,538 × 6] (S3: tbl_df/tbl/data.frame)\n $ freq       : chr [1:2538] \"A\" \"A\" \"A\" \"A\" ...\n $ sex        : chr [1:2538] \"F\" \"F\" \"F\" \"F\" ...\n $ unit       : chr [1:2538] \"PC_EMP\" \"PC_EMP\" \"PC_EMP\" \"PC_EMP\" ...\n $ geo        : chr [1:2538] \"AT\" \"AT\" \"AT\" \"AT\" ...\n $ TIME_PERIOD: Date[1:2538], format: \"2011-01-01\" \"2012-01-01\" ...\n $ values     : num [1:2538] 3.6 4.2 4.1 3.7 3.7 4.1 3.9 3.9 4 3.8 ...\nAfter: Rebeca can save the cult_emp_growth_sex dataset in R into an .rds file that contains all the DataCite or Dublin Core metadata that is required on Zenodo for publication. She can export this cult_emp_growth_sex.rds file into a CSV format that meets the W3C consortium’s standard on publishing CSV with machine-readable JSON metadata. She can also serialize for long-term usability the cult_emp_growth_sex it into an RDF schema that contains all the semantic information to connect this dataset to other data that use the SDMX semantic standards, such as other datasets of Eurostat, the World Bank or OECD.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ahmed: advanced R/eurostat user</span>"
    ]
  },
  {
    "objectID": "Story_2.html#functional-requirements",
    "href": "Story_2.html#functional-requirements",
    "title": "3  Ahmed: advanced R/eurostat user",
    "section": "3.2 Functional requirements",
<<<<<<< HEAD
    "text": "3.2 Functional requirements\n\nThe eurostat package retains the provenance metadata, i.e., the descriptive metadata and the semantics of the Eurostat original cult_emp_sex. The dataset package may be used by eurostat to record the metadata from the source.\nThe eurostat package retains the valid range and the codelist of each variable, in this case, sex, unit, geo, time, and the measured values.\nAhmed does not want to republish the Eurostat datasets, he wants to define new variables and add it to a derived, new dataset. He wants to retain the original dataset metadata (i.e., DataStrucutreDefinition, FAIR metadata) in a way that he can add his definition and codelist to the dataset.\nAhmed wants to be able to save the data and its metadata to at least the W3C format to save into CSV + JSON (for the metadata) or the RDF/SDMX standard serialisation to XML (data and metadata into one xml file.)\nHe also wants to retain and export the metadata needed for a Data Catalogue, i.e., the title of the dataset (not the individual variables), etc."
  },
  {
    "objectID": "Story_3.html#boutique-hotel-hamburg",
    "href": "Story_3.html#boutique-hotel-hamburg",
    "title": "4  Georg: DJ and Playlist Curator",
    "section": "4.1 Boutique Hotel Hamburg",
    "text": "4.1 Boutique Hotel Hamburg\nPersona: Georg, 40-year-old music curator, who mainly works with playlists on his computer. As a seasoned DJ, he is able to find music for every occasion, but due to GDPR constraints, making his playlist location-aware is becoming more and more difficult.\nGoal:\nA hotel group is building a new special boutique hotel in the city of Hamburg, Germany and also wants to represent the music that is playing there to give visitors an immediate feeling of the cultural aspect and what the music sounds like in the area they are currently staying in. The topic of having a “local” aspect is a big factor for clients nowadays so it’s becoming more and more important to be able to adapt to such cases/requests with ease.\nThe main goal is being able to have a sort of database and the always reliable information of “local” music at hand to immediately being able to tell and know where certain artists and their music is based/is coming from and also to be able to implement those local artists into the desired music profiles for the clients without having to look through the internet by hand all the time first.\nScenario:\n\nBefore: Manually researching and checking what kind of music and which artists, labels, songs, albums etc. are based and/or are being released in Hamburg or have a common topic revolving around Hamburg (lyrics, track title, album title etc.)\nAfter: The music curator accesses the in-store music company platform, navigates to the library and specifies a city/region in the search criteria. The system then returns all the relevant tracks that have one of the following criteria matching:\n\nlyrics mention the requested city/region\nartist is from the requested city/region\nlabel is from the requested city/region\nalbum/song title is from the requested city/region\n\n\nThe music curator can go through the results further refining the criteria based on the client’s briefing. Additionally, he can get inspired to acquire new music via standard web stores for the in-store music company based on artists and collabs\nHaving reliable, updated and automatic metadata of artists, labels, songs etc. that are based in a certain city or area to easily fulfil such wishes of clients with more efficiency and especially with way less manual labour/research involved.\nThis would also create a foolproof method for such cases because manual research can also lead to easier mistakes all the time, whereas a reliable external data catalogue is usually always more accurate and the information is easier to interpret and to handle.\nData:\nThe data for being able to determine where what kind of music is coming from is being sourced from many different options. \nThe most important one in this case would be the country, or more specifically the city where the artist/the band is coming from and/or is based in. Another reliable source is being able to tell in which city a label is based, in this case the artist themselves don’t necessarily have to be from the desired city if they release their music through a label coming from where the client wants to have music from. Another factor to consider would be the lyrics mentioning “Hamburg”, either in the title itself or in the lyrics of the song.\nExisting Metadata:\nTitle: All You Need Is Love\nArtist: The Beatles\nRelease Title: Magical Mystery Tour\nLabel: Apple Records\nCatalog Number: PPS 2111\nRelease Country: Netherlands\nRelease Date: 1967\nNew retrieved Metadata:\nProduction Country: England\nProduction City: London\nArtist Home Country: England\nArtist Home Town: Liverpool\n(Due to GDPR constraints both city and country of composer(s) and lyricist(s) with their respective full names will not be considered.)"
  },
  {
    "objectID": "Story_6.html#creating-reports-for-different-pros",
    "href": "Story_6.html#creating-reports-for-different-pros",
    "title": "5  Max",
    "section": "5.1 Creating reports for different PROs",
    "text": "5.1 Creating reports for different PROs\nPersona: Max, a 45-year old music curator at an In-Store Music company, who is a DJ in his spare time. Max is responsible for acquiring the music from different sources such as webshops or from record labels directly. Max mostly only deals with the recording rights side of things because he is in contact with a lot of record labels and artists who send him new music regularly. Usually the ISRC number is included in the metadata, sometimes not.\nThe In-Store Music company needs to include the metadata from the music publishing rights (composer, lyricist, music publisher) to fulfil reporting requirements to the music publishing PROs (performing rights organisation) such as GEMA, PRS, ASCAP.\nMax has no experience in researching the composer(s), lyricist(s) and music publisher(s) of a song. A manual search for these rights holders is complicated, and requires many different sources, e.g. from the PRO databases of GEMA, PRS, ASCAP etc.\nIntroduction - Overview of two different music rights:\n\n\n\n\n\n\nSound Recording Copyright (so called “Recording Rights”)\n\n\n\n\nMusical Work Copyright incl. Composition & Lyrics (so called “Publishing Rights”)\n\n\nOriginator\n\n\nArtist\n\n\nComposer\n\n\nRepresented by\n\n\nRecord Label\n\n\nMusic Publisher\n\n\n\n\n\n\nor by Originator directly (then credited as “Copyright Control”)\n\n\n\n\n\n\n\nIdentifier\n\n\nISRC\n\n\nISWC\n\n\n\nThis leads to incomplete data or contains errors.\nGoal: * Entity matching, particularly connecting recordings (identified with ISRC, if not available with artist name and title) to musical works (ISWC). * Include the metadata of the author(s) and music publisher(s) * Inform PROs (e.g. GEMA, ASCAP) which musical works were played in In-Store Music playlists each including ISWC, title, artist, author(s) and music publisher(s)\nScenario:\n\nBefore: Acquiring wav files from different sources is leading to different metadata quality. In any case the recording title and the artist is provided. Mostly also record label name and ISRC number is available. For including music into In-Store Music playlists it would be crucial to have the full rights owner metadata available\nAfter: Entity matching should be a largely automated process. The ISWC number, the composer name(s) and the name of the music publisher(s) should be automatically written in the metadata dataset of each recording\n\nData:\nThe context of this story is that an In-Store Music provider wants to submit playlists with accurate metadata to PROs to make sure the composer(s) and music publisher(s) get paid for the public performance of their musical works in the In-Store Music domain. The In-Store Music provider uses an elaborated audio content management platform to manage the metadata of the music and to schedule the music into playlists for In-Store music usage. To date, the platform focused on the description of tracks from the musical perspective, while information about the artists who worked on it had only a marginal role. . The platform is already using external data sources (such as Discogs) to import metadata via API.\nVia an API the recordings should be matched with a publicly available database to retrieve the metadata of composer(s) and music publisher(s). The metadata should be stored in the metadata dataset of each recording.\nExample one:\n\nThe recording All You Need Is Love by The Beatles is stored in the platform but is lacking the name of the composer(s) and the name of the music publisher(s)\nexisting metadata is the release title, label, catalogue number, release country and release date\nISRC number is missing\n\n\n5.1.1 Existing metadata\n\n\n\nKey\nValue\n\n\n\n\nTitle:\nAll You Need Is Love\n\n\nArtist:\nThe Beatles\n\n\nRelease Title:\nMagical Mystery Tour\n\n\nLabel:\nApple Records\n\n\nCatalog Number:\nPPS 2111\n\n\nRelease Country:\nNetherlands\n\n\nRelease Date:\n1967\n\n\n\n\n\n5.1.2 New metadata\n\n\n\n\n\n\n\nKey\nValue\n\n\n\n\nISRC:\nBAYE9901228\n\n\nISWC:\nT-010.433.964-1\n\n\nComposer(s):\nJohn Winston Lennon, Paul James McCartney\n\n\nComposer(s):\n(1st Originator’s First Name Last Name, 2nd Originator’s First Name)\n\n\nMusic Publisher:\nSony-ATV Tunes LLC, Sony-ATV Tunes LLC\n\n\nComposer(s):\n(1st Originator’s Name of Music Publisher, 2nd Originator’s Name of Music Publisher)\n\n\n\nExample two:\nThe recording One More Time by Daft Punk is also lacking the name of the composer(s) and the name of the music publisher(s) existing metadata is the release title, label and release date ISRC number is available.\nExisting metadata\n\n\n\nKey\nValue\n\n\n\n\nTitle:\nOne More Time\n\n\nArtist:\nDaft Punk\n\n\nRelease Title:\nDiscovery\n\n\nLabel:\nVirgin / EMI\n\n\nCatalog Number:\nV2940\n\n\nRelease Country:\nEurope\n\n\nRelease Date:\n2001\n\n\nISRC No.:\nGBDUW0000053\n\n\n\nNew metadata\n\n\n\n\n\n\n\nKey\nValue\n\n\n\n\nComposer(s):\nThomas Bangaltar, Guillaume Emmanuel Paul De Homem Christ, Anthony Wayne Moore\n\n\nComposer(s):\n(1st Originator’s First Name Last Name, 2nd Originator’s First Name, 3rd Originator’s Name)\n\n\nMusic Publisher:\nDaft Life Ltd., Daft Life Ltd, Tuff Tony"
=======
    "text": "3.2 Functional requirements\n\nThe eurostat package retains the provenance metadata, i.e., the descriptive metadata and the semantics of the Eurostat original cult_emp_sex. The dataset package may be used by eurostat to record the metadata from the source.\nThe eurostat package retains the valid range and the codelist of each variable, in this case, sex, unit, geo, time, and the measured values.\nAhmed does not want to republish the Eurostat datasets, he wants to define new variables and add it to a derived, new dataset. He wants to retain the original dataset metadata (i.e., DataStrucutreDefinition, FAIR metadata) in a way that he can add his definition and codelist to the dataset.\nAhmed wants to be able to save the data and its metadata to at least the W3C format to save into CSV + JSON (for the metadata) or the RDF/SDMX standard serialisation to XML (data and metadata into one xml file.)\nHe also wants to retain and export the metadata needed for a Data Catalogue, i.e., the title of the dataset (not the individual variables), etc.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ahmed: advanced R/eurostat user</span>"
    ]
>>>>>>> d017abe084122fe52730ff934afc600ae8340f94
  }
]